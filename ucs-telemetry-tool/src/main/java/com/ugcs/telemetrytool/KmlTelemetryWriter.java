package com.ugcs.telemetrytool;

import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import com.ugcs.common.util.Preconditions;

import de.micromata.opengis.kml.v_2_2_0.AltitudeMode;
import de.micromata.opengis.kml.v_2_2_0.Coordinate;
import de.micromata.opengis.kml.v_2_2_0.Document;
import de.micromata.opengis.kml.v_2_2_0.Kml;
import de.micromata.opengis.kml.v_2_2_0.LineString;
import de.micromata.opengis.kml.v_2_2_0.LineStyle;
import de.micromata.opengis.kml.v_2_2_0.Placemark;
import de.micromata.opengis.kml.v_2_2_0.PolyStyle;
import de.micromata.opengis.kml.v_2_2_0.Style;

public class KmlTelemetryWriter implements TelemetryWriter {
	@Override
	public void write(OutputStream out, FlightTelemetry telemetry, List<TelemetryKey> emptyFields) throws IOException {
		Preconditions.checkNotNull(out);
		Preconditions.checkNotNull(telemetry);

		Kml kml = new Kml();
		Document document = kml.createAndSetDocument();
		document.setName("Untitled route");
		document.setVisibility(true);
		document.setDescription("This route was generated by the <a href=\"http://www.ugcs.com\"/>UgCS</a>");

		// set the style of the polyline
		Style plineStyle = document.createAndAddStyle();
		plineStyle.setId("plineStyle");
		LineStyle lineStyle = plineStyle.createAndSetLineStyle();
		lineStyle.setColor("7F00FFFF");
		lineStyle.setWidth(4);
		PolyStyle polyStyle = plineStyle.createAndSetPolyStyle();
		polyStyle.setColor("7F00FF00");

		// add the polyline itself
		Placemark polyline = document.createAndAddPlacemark();
		polyline.setStyleUrl("plineStyle");
		LineString segmentRepresentation = polyline.createAndSetLineString();
		segmentRepresentation.setExtrude(true);
		segmentRepresentation.setTessellate(true);
		segmentRepresentation.setAltitudeMode(AltitudeMode.ABSOLUTE);

		Iterator<TelemetryPoint> pointIterator =
				new TelemetryPointIterator(telemetry.getRecords());
		List<Coordinate> coordinateList = new ArrayList<>();

		while (pointIterator.hasNext()) {
			TelemetryPoint point = pointIterator.next();
				coordinateList.add(new Coordinate(
						point.getLongitude(),
						point.getLatitude(),
						point.getAltitudeAmsl()
				));
		}

		segmentRepresentation.setCoordinates(coordinateList);

		kml.marshal(out);
	}
}