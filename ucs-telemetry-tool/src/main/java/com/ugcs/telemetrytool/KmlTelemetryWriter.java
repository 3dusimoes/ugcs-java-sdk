package com.ugcs.telemetrytool;

import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.ugcs.common.util.Preconditions;
import com.ugcs.common.util.value.AbstractValue;

import de.micromata.opengis.kml.v_2_2_0.AltitudeMode;
import de.micromata.opengis.kml.v_2_2_0.Document;
import de.micromata.opengis.kml.v_2_2_0.Kml;
import de.micromata.opengis.kml.v_2_2_0.LineString;
import de.micromata.opengis.kml.v_2_2_0.LineStyle;
import de.micromata.opengis.kml.v_2_2_0.Placemark;
import de.micromata.opengis.kml.v_2_2_0.PolyStyle;
import de.micromata.opengis.kml.v_2_2_0.Style;

public class KmlTelemetryWriter implements TelemetryWriter {
	@Override
	public void write(FileWriter out, FlightTelemetry telemetry, List<String> fields) throws IOException {
		Preconditions.checkNotNull(out);
		Preconditions.checkNotNull(telemetry);

		Kml kml = new Kml();
		Document document = kml.createAndSetDocument();
		document.setName("Untitled route");
		document.setVisibility(true);
		document.setDescription("This route was generated by the <a href=\"http://www.ugcs.com\"/>U[g]CS</a>");

		// set the style of the polyline
		Style plineStyle = document.createAndAddStyle();
		plineStyle.setId("plineStyle");
		LineStyle lineStyle = plineStyle.createAndSetLineStyle();
		lineStyle.setColor("7F00FFFF");
		lineStyle.setWidth(4);
		PolyStyle polyStyle = plineStyle.createAndSetPolyStyle();
		polyStyle.setColor("7F00FF00");

		// add the polyline itself
		Placemark polyline = document.createAndAddPlacemark();
		polyline.setStyleUrl("plineStyle");
		LineString segmentRepresentation = polyline.createAndSetLineString();
		segmentRepresentation.setExtrude(true);
		segmentRepresentation.setTessellate(true);
		segmentRepresentation.setAltitudeMode(AltitudeMode.ABSOLUTE);

		Map<TelemetryKey, AbstractValue> mostRecent = new HashMap<>();
		List<TelemetryKey> telemetryKeys = telemetry.getTelemetryKeys(fields);

		for (TelemetryRecord telemetryRecord : telemetry.getRecords()) {
			mostRecent.put(
					telemetryRecord.getKey(),
					telemetryRecord.getValue().getValue());

			List<Double> cords = new ArrayList<>();

			for (TelemetryKey telemetryKey : telemetryKeys) {
				AbstractValue value = mostRecent.get(telemetryKey);
				if (value != null) {
					if (!telemetryKey.getCode().equals("altitude_amsl")) {
						cords.add(value.doubleValue() * 180 / Math.PI);
					} else {
						cords.add(value.doubleValue());
					}
				}
			}

			if (cords.size() == 3) {
				segmentRepresentation.addToCoordinates(cords.get(0), cords.get(1), cords.get(2));
			}
		}

		kml.marshal(out);
	}
}
